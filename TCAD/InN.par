* Copyright (c) 1994-2018 Synopsys, Inc.
* This parameter file and the associated documentation are proprietary
* to Synopsys, Inc.  This parameter file may only be used in accordance
* with the terms and conditions of a written license agreement with
* Synopsys, Inc.  All other use, reproduction, or distribution of this
* parameter file is strictly prohibited.

* [01Zu]Zubrilov A. in Properties of Advanced SemiconductorMaterials GaN, AlN, InN, BN, SiC, SiGe.
* Eds. Levinshtein M.E., Rumyantsev S.L., Shur M.S., John Wiley & Sons, Inc., New York, 2001, 49-66.

Epsilon
  {
    * Ratio of the permittivities of material and vacuum
    * epsilon() = epsilon

    epsilon = 15.3 #[1], [01Zu]
}

Epsilon_aniso
  {
    * Ratio of the permittivities of material and vacuum
    * epsilon() = epsilon

    epsilon = 15.3 #[1], [01Zu]
}

*  refractiveindex{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  ComplexRefractiveIndex { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

SpectralConversion
{ * Spectral Conversion Model
  * No default model, user has to define.
  * All wavelength parameters should be in nanometers.
  * Choice of Analytic or NumericalTable selected in Physics section of region
  *
  * ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
  * AbsorptionScaling = float        * scale absorption
  * EmissionScaling = float          * scale emission
  * Analytic (
  *   AbsorptionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  *   EmissionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  * )
  * NumericalTable (
  *   AbsorptionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )
  *   EmissionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )

  ConversionEfficiency = 1.0
}

*************************** Lattice Heat Capacity: ****************************
*******************************************************************************
LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
	cv	= 2.2					# [J/(K cm^3)]
	cv_b	= 0.0000e+00				# [J/(K^2 cm^3)]
	cv_c	= 0.0000e+00				# [J/(K^3 cm^3)]
	cv_d	= 0.0000e+00				# [J/(K^4 cm^3)]
}

**************************** Thermal Conductivity: ****************************
*******************************************************************************
Kappa
  { 
    * Lattice thermal conductivity

    Formula =  0
				
    1/kappa =  2.22 				
    1/kappa_b =  0.0000e+00 
    1/kappa_c = 0.0000e+00 

    * Formula = 1
 
    kappa = 0.45 # [W/(K cm)]
    kappa_b = 0.0000e+00 # [W/(K^2 cm)]
    kappa_c = 0.0000e+00 # [W/(K^3 cm)]
  }

*  Kappa_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

******************************  Hydro Parameters  *****************************
*******************************************************************************
EnergyRelaxationTime
{ *  Energy relaxation times in picoseconds
	tau_w_ele	= 0.3				# [ps]
	tau_w_hol	= 0.3				# [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8					# [1]
	p_l_f	= 0.8					# [1]
	n_gamma	= 0.0000e+00				# [1]
	p_gamma	= 0.0000e+00				# [1]
	n_delta	= 0.0000e+00				# [1]
	p_delta	= 0.0000e+00				# [1]
}

**************************** Bandgap  *****************************************
*******************************************************************************
Bandgap
{ * Eg = Eg0 + dEg0 + alpha Tpar2 / (beta + Tpar) - alpha T2 / (beta + T)
  * dEg0(<bgn_model_name>) is a band gap correction term.  It is used together with 
  * an appropriate BGN model, if this BGN model is chosen in Physics section 
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0	= 5.599					# [eV]
	Bgn2Chi	= 0.5					# [1]
        Eg0     = 0.79					# [eV]
	alpha	= 2.4500e-03				# [eV K^-1]
	beta	= 6.2400e+02				# [K]
	Tpar	= 0.0000e+00				# [K]
}

*  FreeCarrierAbsorption{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

	gamma_1	= 6.85	# [1]
	gamma_2	= 2.1	# [1]
	gamma_3	= 2.9	# [1]
	so	= 1.0000e-03	# [eV]
	ep_te	= 15.3	# [eV]
	ep_tm	= 15.6	# [eV]
	cr	= 0.041	# [eV]
	A1	= -9.2400e+00	# [1]
	A2	= -6.0000e-01	# [1]
	A3	= 8.68	# [1]
	A4	= -4.3400e+00	# [1]
	A5	= -4.3200e+00	# [1]
	A6	= -6.0800e+00	# [1]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
	eps	= 0.0000e+00	# [1]
	a0	= 3.5480e-10	# [cm]
	alpha	= 0.0000e+00	# [cm/K]
	Tpar	= 3.0000e+02	# [K]
	a_nu	= 0.19	# [eV]
	a_c	= -4.0800e+00	# [eV]
	b_shear	= 0.9163	# [eV]
	c_11	= 11.879	# [1e-2 GPa]
	c_12	= 5.376	# [1e-2 GPa]
	d1	= -8.9000e-01	# [eV]
	d2	= 4.27	# [eV]
	d3	= 5.18	# [eV]
	d4	= -2.5900e+00	# [eV]
	c_13	= 0.94	# [1e-2 GPa]
	c_33	= 2	# [1e-2 GPa]
	c0	= 5.7030e-10	# [cm]
}

eDOSMass
{
  * For effective mass specificatition Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 2					# [1]
  * Formula2:
  * me/m0 = (Nc300/2.540x1019 )^(2/3)
  * Nc(Te) = Nc300 x((T/300))^(3/2)   cm^-3 
	
	Nc300 = 4.7000e+17   				# cm^-3
}

hDOSMass
{
  * For effective mass specificatition Formula1 (mh approximation):
  * or Formula2 (Nv300) can be used :
	Formula	= 2					# [1]
  * Formula2:
  * mh/m0 = (Nv300/2.540x1019 )^(2/3)
  * Nv(Te) = Nv300 x((T/300))^(3/2)   cm^-3 
	a	= 0.443587				# [1]
	b	= 3.6095e-03				# [K^-1]
	c	= 1.1735e-04				# [K^-2]
	d	= 1.2632e-06				# [K^-3]
	e	= 3.0256e-09				# [K^-4]
	f	= 4.6834e-03				# [K^-1]
	g	= 2.2869e-04				# [K^-2]
	h	= 7.4693e-07				# [K^-3]
	i	= 1.7275e-09				# [K^-4]
	mm	= 0.0000e+00				# [1]	
	Nv300 = 5.2000e+19   				# cm^-3
}

*  SchroedingerParameters{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  QuantumPotentialParameters { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*****************************  Mobility Models: *******************************
* mu_lowfield^(-1) = mu_dop(mu_max)^(-1) + mu_Enorm^(-1) + mu_cc^(-1)
* Variable = electron value ,   hole value      	# [units]
*******************************************************************************
ConstantMobility:
{ * mu_const = mumax (T/T0)^(-Exponent)
	mumax	= 4.00e+03 ,	2.20e+02		# [cm2/(Vs)] 
	Exponent = 1.9 , 2.1				# [1]
}

*  ConstantMobility_aniso{...}

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
	formula	= 1 ,	1				# [1]
  * If formula=1, model suggested by Masetti et al. is used:
  * mu_dop = mumin1 exp(-Pc/N) + (mu_const - mumin2)/(1+(N/Cr)^alpha)
  *                             - mu1/(1+(Cs/N)^beta)
  * with mu_const from ConstantMobility
	mumin1	= 120 ,	44.9				# [cm2/Vs]
	mumin2	= 115 ,	0.0000e+00			# [cm2/Vs]
	mu1	= 130 , 50				# [cm2/Vs]
	Pc	= 6.50E+17 ,	6.50e+17		# [cm3]
	Cr	= 9.6800e+16 ,	9.6800e+16		# [cm3]
	Cs	= 7.20E+20 ,	7.20e+20		# [cm3]
	alpha	= 1.45 ,	1.45			# [1]
	beta	= 1.85 ,	1.85			# [1]
  * If formula=2, model suggested by Arora is used:
  * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
  * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
  * N is net doping
  * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin	= 88,	54.3			# [cm2/Vs]
	Ar_alm  	= -6.70E-01,	-5.70E-01	# [1]
	Ar_mud  	= 2.20E+03,	4.07E+02	# [cm2/Vs]
	Ar_ald  	= -4.00E+00,	-2.23E+00	# [1]
	Ar_N0   	= 1.25E+17,	2.35E+17	# [cm^(-3)]
	Ar_alN  	= 1.9,	2.4			# [1]
	Ar_a    	= 0.98,	0.88			# [1]
	Ar_ala  	= -1.50E-01,	-1.46E-01	# [1]

###alternative parameter set
 	#mumin1	= 700,		20			# [cm2/Vs]
	#mumin2	= 700,		20		# [cm2/Vs]
	#mu1	= 00,		00			# [cm2/Vs]
	#Pc	= 0.00E+17,	5.00E+18		# [cm3]
	#Cr	= 2.00E+17,	8.00E+17		# [cm3]
	#Cs	= 5.20E+17,	8.00E+18		# [cm3]
	#alpha	= 0.70,		1.05	       		# [1]
	#beta	= 0.75,		0.75			# [1]

***** Data of 1st set for electrons, fit to Tansley&Foley (1984). ; Chin et al. (1994)
***** 1st set at 300K corresponds to present Masetti model at 300K
***** Data of 2nd set for electrons after S. Vitanov and V. Palankovski
***** Data of 3rd set for electrons after Farahmad et al.  *****
***** No Ref. for holes - all sets
	#1st set
*	Ar_mumin	=  700		,	20		# [cm2/Vs]
*	Ar_alm  	=   -1.9	,	-1.50E+00	# [1]
*	Ar_mud  	=  3300.0	,	 2.00E+02	# [cm2/Vs]
*	Ar_ald  	=   -1.9 	,	-1.50E+00	# [1]
*	Ar_N0   	=    2.0E+17	,	 1.00E+17	# [cm^(-3)]
*	Ar_alN  	=    1.00	,	 1.0		# [1]
*	Ar_a    	=    0.70	,	 0.70		# [1]
*	Ar_ala  	=    0.00	,	 0.00   	# [1]

	#2nd set
*	Ar_mumin	=  500		,	20		# [cm2/Vs]
*	Ar_alm  	=   -2.7	,	-1.50E+00	# [1]
*	Ar_mud  	=  9700.0	,	 2.00E+02	# [cm2/Vs]
*	Ar_ald  	=   -2.7 	,	-1.50E+00	# [1]
*	Ar_N0   	=    2.0E+17	,	 1.00E+17	# [cm^(-3)]
*	Ar_alN  	=    4.50	,	 1.0		# [1]
*	Ar_a    	=    0.65	,	 0.70		# [1]
*	Ar_ala  	=    0.00	,	 0.00   	# [1]
*	
	#3rd set
#	Ar_mumin	=  774		,	20		# [cm2/Vs]
#	Ar_alm  	=   -6.39	,	-1.50E+00	# [1]
#	Ar_mud  	= 2364.4	,	 2.00E+02	# [cm2/Vs]
#	Ar_ald  	=   -1.81	,	-1.50E+00	# [1]
#	Ar_N0   	=    1.0E+17	,	 1.00E+17	# [cm^(-3)]
#	Ar_alN  	=    8.05	,	 1.0		# [1]
#	Ar_a    	=    0.68	,	 0.70		# [1]
#	Ar_ala  	=   -0.94	,	 0.00   	# [1]	

}

HighFieldDependence:
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0	= 2.2 ,	2.2				# [1]
	betaexp	= 0.0000e+00 ,	0.0000e+00		# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT	= 0.2 ,	0.2				# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)4)/(1+(E/E0_TrEf)4)
	E0_TrEf	= 7.1000e+04 ,	7.1000e+04		# [1]
	Ksmooth_TrEf	= 1 ,	1			# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula	= 2 ,	2			# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2):
	A_vsat	= 2.600e+07 ,	2.60e+07		# [1]
	B_vsat	= 0 ,	 0	# [1]
	vsat_min	= 2.2000e+07 ,	2.2000e+07	# [1]
	
###alternative parameter set
#	beta0	= 2,	2				#[1]
#	betaexp	= 0.0000e+00,	0.0000e+00		#[1]
#	E0_TrEf	= 2.5000e+04 ,	2.5000e+04		# [1]
#	Ksmooth_TrEf	= 1 ,	1			# [1]
#	A_vsat		=  1.4000e+07,	1.3000e+07		#[cm/s]
#	B_vsat		=  0.1000e+07,	0.1000e+07	#[cm/s]
#	vsat_min	=  9.0000e+06,	9.0000e+06	#[cm/s]
#	vsat0		=  1.3000e+07,	1.3000e+07		#[cm/s]
#	vsatexp		= -0.2000e+00, -0.2000e+00		#[1]	
	
}

TransferredElectronEffect2:
{ * Transferred Electron Effect 2:
  *
  *                mu_lowfield + mu1 * (F/E0)^alpha + vsat * F^(beta-1) / E1^beta
  * mu_highfield = --------------------------------------------------------------
  *                            1 + gamma * (F/E0)^alpha + (F/E1)^beta
  *
	mu1	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	E0	= 5.2424e+04 ,	4.0000e+03	# [V/cm]
	E1	= 5.2424e+04 ,	4.0000e+03	# [V/cm]
	alpha	= 0.6078 ,	0.0000e+00	# [1]
	beta	= 3.8501 ,	4	# [1]
	gamma	= 2.2623 ,	0.0000e+00	# [1]
}

TransferredElectronEffect2_aniso:
{ * Transferred Electron Effect 2:
  *
  *                mu_lowfield + mu1 * (F/E0)^alpha + vsat * F^(beta-1) / E1^beta
  * mu_highfield = --------------------------------------------------------------
  *                            1 + gamma * (F/E0)^alpha + (F/E1)^beta
  *
	mu1	= 0.0000e+00 ,	0.0000e+00	# [cm^2/Vs]
	E0	= 5.2424e+04 ,	4.0000e+03	# [V/cm]
	E1	= 5.2424e+04 ,	4.0000e+03	# [V/cm]
	alpha	= 0.6078 ,	0.0000e+00	# [1]
	beta	= 3.8501 ,	4	# [1]
	gamma	= 2.2623 ,	0.0000e+00	# [1]
}

******************  Recombination/Generation Models: **************************
* Variable = electron value ,   hole value     		# [units]
*******************************************************************************
Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00		# [s]
	taumax	= 1.0000e-9 ,	1.0000e-9		# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16		# [cm^(-3)]
	gamma	= 1 ,	1				# [1]
	Talpha	= -1.5000e+00 ,	-1.5000e+00		# [1]
	Tcoeff	= 2.55 ,	2.55			# [1]
	Etrap	= 0.0000e+00				# [eV]
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
	a(low)	= 2.9e+08 ,	1.3400e+08		# [1/cm]
	a(high)	= 2.9e+08 ,	1.3400e+08		# [1/cm]
	b(low)	= 3.4e+07 ,	2.0300e+07		# [V/cm]
	b(high)	= 3.4e+07 ,	2.0300e+07		# [V/cm]
	E0	= 4.0000e+05 ,	4.0000e+05		# [V/cm]
	hbarOmega	= 0.035 ,	0.035		# [eV]
	
###alternative parameter set
	#a(low)		= 1.300e6    ,	1.300e6 		# [1/cm]
	#a(high)		= 1.300e6    ,	1.300e6 		# [1/cm]
	#b(low)		= 6.650e6     ,	6.650e6		        # [V/cm]
	#b(high)		= 6.650e6  ,	6.650e6 		# [V/cm]
	#hbarOmega	= 0.06       ,	0.06  	                # [eV]	
}

*******************************************************************
*  Parameters for the recombination models below were taken 
*  from GaAs and require calibration for accurate simulations
*******************************************************************
Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

Piezoelectric_Polarization
{ * The 'strain' model computes the polarization vector as follows:
  * 
  *   [P_x]   [psp_x                                     ]
  *   [P_y] = [psp_y                                     ]
  *   [P_z]   [psp_z + 2*d31*strain*(c11+c12-2*c13^2/c33)]
  * 
  *   strain = (1-relax)*(a0-a)/a
  * 
  * The 'stress' model computes the polarization vector as follows:
  * 
  *   [P_x]   [psp_x]   [d11 d12 d13 d14 d15 d16]   [stress_XX]
  *   [P_y] = [psp_y] + [d21 d22 d23 d24 d25 d26] * [stress_YY]
  *   [P_z]   [psp_z]   [d31 d32 d33 d34 d35 d36]   [stress_ZZ]
  *                                                 [stress_YZ]
  *                                                 [stress_XZ]
  *                                                 [stress_XY]
  * 
  * Parameters:
  * 
  *   [psp_x]: spontaneous polarization vector,
  *   [psp_y]  defined in crystal system [C/cm^2]
  *   [psp_z]
  * 
  *   c11, c12, c13, c33: stiffness constants,
  *                       defined in crystal system [Pa]
  * 
  *   a0: strained lattice constant [Angstrem]
  *   a: unstrained lattice constant [Angstrem]
  *   relax: relaxation parameter [1]
  * 
  *   d11 ... d36: piezoelectric coefficients,
  *                defined in crystal system [cm/V]
  * 
  * Fields:
  * 
  *   [stress_XX]: stress tensor,
  *   [stress_YY]  defined in stress system [Pa]
  *   [stress_ZZ]
  *   [stress_YZ]
  *   [stress_XZ]
  *   [stress_XY]
  * 
  *   [P_x]: polarization vector,
  *   [P_y]  defined in simulation system [C/cm^2]
  *   [P_z]
  * 
  * Coordinate systems:
  * 
  *   The simulation system is defined relative to the crystal
  *   system.  For example:
  * 
  *     LatticeParameters {
  *       X = (1, 0,  0)
  *       Y = (0, 0, -1)
  *     }
  * 
  *   The stress coordinate system is defined relative to the simulation
  *   system.  For example:
  * 
  *     Physics {
  *       Piezo (
  *         OriKddX = (-0.96  0.28  0)
  *         OriKddY = ( 0.28  0.96  0)
  *         Stress = (1e9  2e9  3e9  4e9  5e9  6e9)  # [Pa]
  *       )
  *     }
  * 
  *   To compute the polarization vector, the stress tensor is first
  *   transformed from the stress system to the crystal system.  Then
  *   the polarization vector is evaluated according to the 'strain' or
  *   'stress' model above.  Finally, the polarization vector is transformed
  *   from the crystal system to the simulation system.
  * 
  * piezoelectric coefficients:
	d11	= 0.0000e+00	# [cm/V]
	d12	= 0.0000e+00	# [cm/V]
	d13	= 0.0000e+00	# [cm/V]
	d14	= 0.0000e+00	# [cm/V]
	d15	= -5.500e-10	# [cm/V]
	d16	= 0.0000e+00	# [cm/V]
	d21	= 0.0000e+00	# [cm/V]
	d22	= 0.0000e+00	# [cm/V]
	d23	= 0.0000e+00	# [cm/V]
	d24	= -5.500e-10	# [cm/V]
	d25	= 0.0000e+00	# [cm/V]
	d26	= 0.0000e+00	# [cm/V]
	d31	= -3.5000e-10	# [cm/V]
	d32	= -3.5000e-10	# [cm/V]
	d33	= 7.6000e-10	# [cm/V]
	d34	= 0.0000e+00	# [cm/V]
	d35	= 0.0000e+00	# [cm/V]
	d36	= 0.0000e+00	# [cm/V]
  * 
  * spontaneous polarization:
	psp_x	= 0.0000e+00	# [C/cm^2]
	psp_y	= 0.0000e+00	# [C/cm^2]
	psp_z	= -4.2000e-06	# [C/cm^2]
  * 
  * stiffness constants:
	c11	= 2.2300e+11	# [Pa]
	c12	= 1.1500e+11	# [Pa]
	c13	= 9.2000e+10	# [Pa]
	c33	= 2.2400e+11	# [Pa]
	c44    = 4.8000e+10

  * piezoelectric coefficients 
  	e31	= -4.8586e-05		#[C/cm^2]
  	e32	= -4.8586e-05		#[C/cm^2]
  	e33	=  1.0629e-04		#[C/cm^2]
  	e15	=  2.6512e-05		#[C/cm^2] 
  	e24	=  2.6512e-05		#[C/cm^2] 
	
  * strain parameters:
	a0	= 3.189	# [Angstrem]
	a	= 3.54	# [Angstrem]
	relax	= 0.1	# [1]
}

LatticeParameters
  {
    * Default orientation for 2D simulations with Y-axis pointing down
    * X = (1, 0, 0)
    * Y = (0, 0,-1)
    * S[i][j] - elasticity modulus; i,j = 1,2,...6 and j>=i.
    * CrystalSystem is symmetry, used ONLY to define the elasticity matrix.
    * Cubic (CrystalSystem=0): S[1][1],S[1][2],S[4][4]
    * Hexagonal (CrystalSystem=1): S[1][1],S[1][2],S[1][3],S[3][3],S[4][4]
 
    S[1][1] =  6.54e-01 # [1e-12 cm^2/din]
    S[1][2] = -2.72e-01 # [1e-12 cm^2/din]
    S[1][3] = -1.57e-01 # [1e-12 cm^2/din]
    S[3][3] =  5.75e-01 # [1e-12 cm^2/din]
    S[4][4] =  2.08e+00 # [1e-12 cm^2/din]
    CrystalSystem = 1 # [1]
  }

BarrierTunneling { mt=0.07, 0.5}


