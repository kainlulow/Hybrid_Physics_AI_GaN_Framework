* Copyright (c) 1994-2018 Synopsys, Inc.
* This parameter file and the associated documentation are proprietary
* to Synopsys, Inc.  This parameter file may only be used in accordance
* with the terms and conditions of a written license agreement with
* Synopsys, Inc.  All other use, reproduction, or distribution of this
* parameter file is strictly prohibited.

* [73Bar] A. S. Barker, M. Ilegems, Infrared lattice vibrations and free-electron dispersion in GaN, 
* Phys. Rev., B7, 1973

*  Mole dependent material: InGaN (x=0) = GaN
*  Mole dependent material: InGaN (x=1) = InN

Epsilon
  {
    * Ratio of the permittivities of material and vacuum
    * epsilon() = epsilon
    * Mole fraction dependent model.
    * If only constant parameters are specified, those values will be
    * used for any mole fraction instead of the interpolation below.
    * Linear interpolation is used on the interval [0,1].

    Xmax(0) = 0.0 
    Xmax(1) = 1.0

    epsilon(0) = 8.9 #[1], ioffe database, [01Bou], Wurtzite, normal to c-axis, higher values up to 9.7 are often used
    epsilon(1) = 15.3 #[1], [02Zu]		      							      
  }

Epsilon_aniso
  {
    * Ratio of the permittivities of material and vacuum
    * epsilon() = epsilon
    * Mole fraction dependent model.
    * If only constant parameters are specified, those values will be
    * used for any mole fraction instead of the interpolation below.
    * Linear interpolation is used on the interval [0,1].

    Xmax(0) = 0.0 
    Xmax(1) = 1.0

    epsilon = 9.74 #[1], ioffe database, ratio of 1.095 from [73Bar], Wurtzite, parallel to c-axis, higher values up to 10.5
      * are often used, e.g. when using 9.5 for normal to c-axis, original values from [73Bar] are 9.5 (normal to c-axis) and
      * 10.4(parallel to c-axis)
    epsilon(1) = 15.3 #[1], [02Zu]		      							      
  }

*  refractiveindex{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  ComplexRefractiveIndex { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

SpectralConversion
{ * Spectral Conversion Model
  * No default model, user has to define.
  * All wavelength parameters should be in nanometers.
  * Choice of Analytic or NumericalTable selected in Physics section of region
  *
  * ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
  * AbsorptionScaling = float        * scale absorption
  * EmissionScaling = float          * scale emission
  * Analytic (
  *   AbsorptionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  *   EmissionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  * )
  * NumericalTable (
  *   AbsorptionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )
  *   EmissionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )

  ConversionEfficiency = 1.0
}

LatticeHeatCapacity
  {
    Xmax(0) = 0.0
    Xmax(1) = 1.0
					
    cv(0) = 3.0 #[1], see GaN
    cv(1) = 2.2 #[1], see InN

    cv_b(0) = 0.0000e+00 # [J/(K^2 cm^3)]
    cv_b(1) = 0.0000e+00 # [J/(K^2 cm^3)]
    cv_c(0) = 0.0000e+00 # [J/(K^3 cm^3)]
    cv_c(1) = 0.0000e+00 # [J/(K^3 cm^3)]
    cv_d(0) = 0.0000e+00 # [J/(K^4 cm^3)]	      					
    cv_d(1) = 0.0000e+00 # [J/(K^4 cm^3)]	      					
  }

*  Kappa{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  Kappa_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  EnergyRelaxationTime{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  AvalancheFactors{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

Bandgap
{ * Eg = Eg0 + alpha Tpar2 / (beta + Tpar) - alpha T2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.

  	Chi0	= 3.922					# [eV]
	Bgn2Chi	= 0.5					# [1]
	Eg0	= 3.507					# [eV]
	alpha	= 9.09e-04				# [eV K^-1]
	beta	= 8.36e+02				# [K]
	Tpar	= 0.0000e+00				# [K]
	Xmax(0) = 0
	
  	Xmax(1) 	= 1
	Chi0(1)		= 5.599				# [eV]
	B(Chi0(1))	= -0.7
	C(Chi0(1))	= 0.0
	Bgn2Chi(1)	= 0.5				# [1]
	B(Bgn2Chi(1))	= 0.0
	C(Bgn2Chi(1))	= 0.0
	Eg0(1)		= 0.79 				# [eV]
	B(Eg0(1))	= 1.4
	C(Eg0(1))	= 0.0
	alpha(1)	= 2.450e-03			# [eV K^-1]
	B(alpha(1))	= 0.0
	C(alpha(1))	= 0.0
	beta(1)		= 0.624e+03			# [K]
	B(beta(1))	= 0.0
	C(beta(1))	= 0.0
	
}

*  FreeCarrierAbsorption{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	gamma_1(0)	= 6.85	# [1]
	gamma_1(1)	= 6.85	# [1]
	gamma_2(0)	= 2.1	# [1]
	gamma_2(1)	= 2.1	# [1]
	gamma_3(0)	= 2.9	# [1]
	gamma_3(1)	= 2.9	# [1]
	so(0)	= 1.0000e-03	# [eV]
	so(1)	= 0.014	# [eV]
	ep_te(0)	= 15.3	# [eV]
	ep_te(1)	= 18.8	# [eV]
	ep_tm(0)	= 15.6	# [eV]
	ep_tm(1)	= 12.4	# [eV]
	A1(0)	= -9.2400e+00	# [1]
	A1(1)	= -7.2400e+00	# [1]
	A2(0)	= -6.0000e-01	# [1]
	A2(1)	= -5.1000e-01	# [1]
	A3(0)	= 8.68	# [1]
	A3(1)	= 6.73	# [1]
	A4(0)	= -4.3400e+00	# [1]
	A4(1)	= -3.3600e+00	# [1]
	A5(0)	= -4.3200e+00	# [1]
	A5(1)	= -3.3500e+00	# [1]
	A6(0)	= -6.0800e+00	# [1]
	A6(1)	= -4.7200e+00	# [1]
	cr(0)	= 0.041	# [eV]
	cr(1)	= 0.019	# [eV]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
  * Mole fraction dependent model.
  * If only constant parameters are specified, those values will be
  * used for any mole fraction instead of the interpolation below.
  * Linear interpolation is used on the interval [0,1].
	a_nu(0)	= 0.19	# [eV]
	a_nu(1)	= 0.19	# [eV]
	a_c(0)	= -4.0800e+00	# [eV]
	a_c(1)	= -4.0800e+00	# [eV]
	b_shear(0)	= 0.9163	# [eV]
	b_shear(1)	= 0.9163	# [eV]
	C_11(0)	= 11.879	# [1e-2 GPa]
	C_11(1)	= 11.879	# [1e-2 GPa]
	C_12(0)	= 5.376	# [1e-2 GPa]
	C_12(1)	= 5.376	# [1e-2 GPa]
	eps(0)	= 0.0000e+00	# [1]
	eps(1)	= 0.0000e+00	# [1]
	a0(0)	= 3.5480e-10	# [m]
	a0(1)	= 3.1890e-10	# [m]
	alpha(0)	= 0.0000e+00	# [m/K]
	alpha(1)	= 0.0000e+00	# [m/K]
	D1(0)	= -8.9000e-01	# [eV]
	D1(1)	= -8.9000e-01	# [eV]
	D2(0)	= 4.27	# [eV]
	D2(1)	= 4.27	# [eV]
	D3(0)	= 5.18	# [eV]
	D3(1)	= 5.18	# [eV]
	D4(0)	= -2.5900e+00	# [eV]
	D4(1)	= -2.5900e+00	# [eV]
	C_13(0)	= 0.94	# [1e-2 GPa]
	C_13(1)	= 1	# [1e-2 GPa]
	C_33(0)	= 2	# [1e-2 GPa]
	C_33(1)	= 3.92	# [1e-2 GPa]
	c0(0)	= 5.7030e-10	# [cm]
	c0(1)	= 5.1850e-10	# [cm]
}

*  eDOSMass{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  hDOSMass{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  SchroedingerParameters{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  QuantumPotentialParameters { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

ConstantMobility
  {
    * Mole fraction dependent model.
    * If only constant parameters are specified, those values will be
    * used for any mole fraction instead of the interpolation below.
    * Linear interpolation is used on the interval [0,1].

    Xmax(0) = 0.0
    Xmax(1) = 1.0
					
    mumax(0) = 1.500e+03, 2.0000e+01 # [cm2/(Vs)]
    mumax(1) = 4.000e+03, 20 #2.2000e+02 # [cm2/(Vs)]
 
    Exponent = 1, 2.1 # [1]
    Exponent = 1.9, 2.1 # [1]
 
    mutunnel = 0.05, 0.05      
  }

*  ConstantMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

DopingDependence:
{
  * For doping dependent mobility model three formulas
  * can be used. Formula1 is based on Masetti et al. approximation.
  * Formula2 uses approximation, suggested by Arora.
  
#GaN 
	formula	= 2 ,	2				# [1]

* If formula=2, model suggested by Arora is used: 
***** No Ref. for holes, Data for electrons from Fahramad et al.  *****
* mu_dop = muminA + mudA/(1.+(N/N00)^AA),
* where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
* N is net doping
* N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
	Ar_mumin(0)	=  295.0	,	10 #54.3			# [cm2/Vs]
	Ar_alm(0)  	=   -1.02	,	-5.70E-01	# [1]
	Ar_mud(0)  	= 1165.7	,	10 # 4.07E+02	# [cm2/Vs]
	Ar_ald(0)  	=   -3.84 	,	-2.23E+00	# [1]
	Ar_N0(0)   	=    1.0E+17	,	 2.35E+17	# [cm^(-3)]
	Ar_alN(0)  	=    3.02	,	 2.4		# [1]
	Ar_a(0)    	=    0.66	,	 0.88		# [1]
	Ar_ala(0)  	=    0.81	,	-1.46E-01	# [1] 
        Xmax(0) 	=    0.0

#InN
	Xmax(1)		=    1.0
	Ar_mumin(1)	=  774		,	10 #20		# [cm2/Vs]
	B(Ar_mumin(1))	=  390       	,	0.0
        C(Ar_mumin(1))	= 0.0       	,	0.0
	Ar_alm(1)  	=   -6.39	,	-1.50E+00	# [1]
	B(Ar_alm(1))	= 0.0       	,	0.0
        C(Ar_alm(1))	= 0.0       	,	0.0
	Ar_mud(1)  	= 2364.4	,	10 # 2.00E+02	# [cm2/Vs]
	B(Ar_mud(1))	= 1200.0       	,	0.0
        C(Ar_mud(1))	= 0.0       	,	0.0
	Ar_ald(1)  	=   -1.81	,	-1.50E+00	# [1]
	B(Ar_ald(1))	= 0.0       	,	0.0
        C(Ar_ald(1))	= 0.0       	,	0.0
	Ar_N0(1)   	=    1.0E+17	,	 1.00E+17	# [cm^(-3)]
	B(Ar_N0(1))	= 0.0       	,	0.0
        C(Ar_N0(1))	= 0.0       	,	0.0
	Ar_alN(1)  	=    8.05	,	 1.0		# [1]
	B(Ar_alN(1))	= 0.0       	,	0.0
        C(Ar_alN(1))	= 0.0       	,	0.0
	Ar_a(1)    	=    0.68	,	 0.70		# [1]
	B(Ar_a(1))	= 0.0       	,	0.0
        C(Ar_a(1))	= 0.0       	,	0.0
	Ar_ala(1)  	=   -0.94	,	 0.00   	# [1]
	B(Ar_ala(1))	= 0.0       	,	0.0
        C(Ar_ala(1))	= 0.0       	,	0.0


}	

*  DopingDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PhuMob{...} 
*  Philips Unified Mobility Model:
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence "100" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso "100" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence "110" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso "110" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence "111" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  EnormalDependence_aniso "111" {...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  NegInterfaceChargeMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  NegInterfaceChargeMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PosInterfaceChargeMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  PosInterfaceChargeMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Coulomb2DMobility{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


*  Coulomb2DMobility_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

HighFieldDependence
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )1/beta
  * beta = beta0 (T/T0)^betaexp.
  Vsat_Formula			= 2 		, 2			# [1]
# GaN parameters
	beta0			= 1.7 		, 1.7			# [1]
	betaexp			= 0.0000e+00 	, 0.0000e+00		# [1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT			= 0.05 		, 0.05			# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)4)/(1+(E/E0_TrEf)4)
	E0_TrEf			= 1.5000e+05 	, 1.5000e+05		# [1]
	Ksmooth_TrEf		= 1 		, 1			# [1]

 * For vsat either Formula1 or Formula2 can be used.

 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2):
	A_vsat			= 1.8e7     	, 1.0000e+07		# [1]
	B_vsat			= 0 	    	, 0			# [1]
	vsat_min		= 5.000e+05 	, 5.000e+05		# [1]
	
	vsat0			=  1.8000e+07	, 1.0000e+07		#[cm/s]
	vsatexp			= -0.0000e+00	, -0.0000e+00		#[1]
	Xmax(0)			= 0		, 0

#InN	
        Xmax(1)			= 1		, 1
	beta0(1)		= 2	    	, 2			#[1]
	betaexp(1)		= 0.0000e+00	, 0.0000e+00		#[1]

	K_dT(1)			= 0.2 		, 0.2			# [1]
	
	E0_TrEf(1)		= 2.5000e+04 	, 2.5000e+04		# [1]
	Ksmooth_TrEf(1)		= 1 		, 1			# [1]

	A_vsat(1)		=  1.4000e+07	, 1.3000e+07		#[cm/s]
	B_vsat(1)		=  0.1000e+07	, 0.1000e+07		#[cm/s]
	vsat_min(1)		=  9.0000e+06	, 9.0000e+06		#[cm/s]

	vsat0(1)		=  1.3000e+07	, 1.3000e+07		#[cm/s]
	vsatexp(1)		= -0.2000e+00	, -0.2000e+00		#[1]


}

*  HighFieldDependence_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.


TransferredElectronEffect2:
{ * Transferred Electron Effect 2:
  *
  *                mu_lowfield + mu1 * (F/E0)^alpha + vsat * F^(beta-1) / E1^beta
  * mu_highfield = --------------------------------------------------------------
  *                            1 + gamma * (F/E0)^alpha + (F/E1)^beta
  *
	* parameter mu1:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	mu1(0)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(1)	= 0.2,	0.2	#[1]
	mu1(1)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(1))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(1))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(2)	= 0.5,	0.5	#[1]
	mu1(2)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(2))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(2))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(3)	= 0.8,	0.8	#[1]
	mu1(3)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(3))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(3))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(4)	= 1,	1	#[1]
	mu1(4)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(4))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(4))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]

	* parameter E0:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	E0(0)	= 2.2089e+05,	4.0000e+03	#[V/cm]
	Xmax(1)	= 0.2,	0.2	#[1]
	E0(1)	= 1.5189e+05,	4.0000e+03	#[V/cm]
	B(E0(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(2)	= 0.5,	0.5	#[1]
	E0(2)	= 9.3815e+04,	4.0000e+03	#[V/cm]
	B(E0(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(3)	= 0.8,	0.8	#[1]
	E0(3)	= 6.3430e+04,	4.0000e+03	#[V/cm]
	B(E0(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(4)	= 1,	1	#[1]
	E0(4)	= 5.2424e+04,	4.0000e+03	#[V/cm]
	B(E0(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]

	* parameter E1:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	E1(0)	= 2.2089e+05,	4.0000e+03	#[V/cm]
	Xmax(1)	= 0.2,	0.2	#[1]
	E1(1)	= 1.5189e+05,	4.0000e+03	#[V/cm]
	B(E1(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(2)	= 0.5,	0.5	#[1]
	E1(2)	= 9.3815e+04,	4.0000e+03	#[V/cm]
	B(E1(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(3)	= 0.8,	0.8	#[1]
	E1(3)	= 6.3430e+04,	4.0000e+03	#[V/cm]
	B(E1(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(4)	= 1,	1	#[1]
	E1(4)	= 5.2424e+04,	4.0000e+03	#[V/cm]
	B(E1(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]

	* parameter alpha:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	alpha(0)	= 0.7857,	0.0000e+00	#[1]
	Xmax(1)	= 0.2,	0.2	#[1]
	alpha(1)	= 0.767,	0.0000e+00	#[1]
	B(alpha(1))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(1))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(2)	= 0.5,	0.5	#[1]
	alpha(2)	= 0.7395,	0.0000e+00	#[1]
	B(alpha(2))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(2))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(3)	= 0.8,	0.8	#[1]
	alpha(3)	= 0.6725,	0.0000e+00	#[1]
	B(alpha(3))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(3))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(4)	= 1,	1	#[1]
	alpha(4)	= 0.6078,	0.0000e+00	#[1]
	B(alpha(4))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(4))	= 0.0000e+00,	0.0000e+00	#[1]

	* parameter beta:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	beta(0)	= 7.2044,	4	#[1]
	Xmax(1)	= 0.2,	0.2	#[1]
	beta(1)	= 6.0373,	4	#[1]
	B(beta(1))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(1))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(2)	= 0.5,	0.5	#[1]
	beta(2)	= 4.8807,	4	#[1]
	B(beta(2))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(2))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(3)	= 0.8,	0.8	#[1]
	beta(3)	= 4.133,	4	#[1]
	B(beta(3))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(3))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(4)	= 1,	1	#[1]
	beta(4)	= 3.8501,	4	#[1]
	B(beta(4))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(4))	= 0.0000e+00,	0.0000e+00	#[1]

	* parameter gamma:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	gamma(0)	= 6.1973,	0.0000e+00	#[1]
	Xmax(1)	= 0.2,	0.2	#[1]
	gamma(1)	= 5.1797,	0.0000e+00	#[1]
	B(gamma(1))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(1))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(2)	= 0.5,	0.5	#[1]
	gamma(2)	= 3.7387,	0.0000e+00	#[1]
	B(gamma(2))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(2))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(3)	= 0.8,	0.8	#[1]
	gamma(3)	= 2.7321,	0.0000e+00	#[1]
	B(gamma(3))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(3))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(4)	= 1,	1	#[1]
	gamma(4)	= 2.2623,	0.0000e+00	#[1]
	B(gamma(4))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(4))	= 0.0000e+00,	0.0000e+00	#[1]

}

TransferredElectronEffect2_aniso:
{ * Transferred Electron Effect 2:
  *
  *                mu_lowfield + mu1 * (F/E0)^alpha + vsat * F^(beta-1) / E1^beta
  * mu_highfield = --------------------------------------------------------------
  *                            1 + gamma * (F/E0)^alpha + (F/E1)^beta
  *
	* parameter mu1:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	mu1(0)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(1)	= 0.2,	0.2	#[1]
	mu1(1)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(1))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(1))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(2)	= 0.5,	0.5	#[1]
	mu1(2)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(2))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(2))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(3)	= 0.8,	0.8	#[1]
	mu1(3)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(3))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(3))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	Xmax(4)	= 1,	1	#[1]
	mu1(4)	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	B(mu1(4))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]
	C(mu1(4))	= 0.0000e+00,	0.0000e+00	#[cm^2/Vs]

	* parameter E0:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	E0(0)	= 2.2089e+05,	4.0000e+03	#[V/cm]
	Xmax(1)	= 0.2,	0.2	#[1]
	E0(1)	= 1.5189e+05,	4.0000e+03	#[V/cm]
	B(E0(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(2)	= 0.5,	0.5	#[1]
	E0(2)	= 9.3815e+04,	4.0000e+03	#[V/cm]
	B(E0(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(3)	= 0.8,	0.8	#[1]
	E0(3)	= 6.3430e+04,	4.0000e+03	#[V/cm]
	B(E0(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(4)	= 1,	1	#[1]
	E0(4)	= 5.2424e+04,	4.0000e+03	#[V/cm]
	B(E0(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E0(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]

	* parameter E1:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	E1(0)	= 2.2089e+05,	4.0000e+03	#[V/cm]
	Xmax(1)	= 0.2,	0.2	#[1]
	E1(1)	= 1.5189e+05,	4.0000e+03	#[V/cm]
	B(E1(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(1))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(2)	= 0.5,	0.5	#[1]
	E1(2)	= 9.3815e+04,	4.0000e+03	#[V/cm]
	B(E1(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(2))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(3)	= 0.8,	0.8	#[1]
	E1(3)	= 6.3430e+04,	4.0000e+03	#[V/cm]
	B(E1(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(3))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	Xmax(4)	= 1,	1	#[1]
	E1(4)	= 5.2424e+04,	4.0000e+03	#[V/cm]
	B(E1(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]
	C(E1(4))	= 0.0000e+00,	0.0000e+00	#[V/cm]

	* parameter alpha:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	alpha(0)	= 0.7857,	0.0000e+00	#[1]
	Xmax(1)	= 0.2,	0.2	#[1]
	alpha(1)	= 0.767,	0.0000e+00	#[1]
	B(alpha(1))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(1))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(2)	= 0.5,	0.5	#[1]
	alpha(2)	= 0.7395,	0.0000e+00	#[1]
	B(alpha(2))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(2))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(3)	= 0.8,	0.8	#[1]
	alpha(3)	= 0.6725,	0.0000e+00	#[1]
	B(alpha(3))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(3))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(4)	= 1,	1	#[1]
	alpha(4)	= 0.6078,	0.0000e+00	#[1]
	B(alpha(4))	= 0.0000e+00,	0.0000e+00	#[1]
	C(alpha(4))	= 0.0000e+00,	0.0000e+00	#[1]

	* parameter beta:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	beta(0)	= 7.2044,	4	#[1]
	Xmax(1)	= 0.2,	0.2	#[1]
	beta(1)	= 6.0373,	4	#[1]
	B(beta(1))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(1))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(2)	= 0.5,	0.5	#[1]
	beta(2)	= 4.8807,	4	#[1]
	B(beta(2))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(2))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(3)	= 0.8,	0.8	#[1]
	beta(3)	= 4.133,	4	#[1]
	B(beta(3))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(3))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(4)	= 1,	1	#[1]
	beta(4)	= 3.8501,	4	#[1]
	B(beta(4))	= 0.0000e+00,	0.0000e+00	#[1]
	C(beta(4))	= 0.0000e+00,	0.0000e+00	#[1]

	* parameter gamma:
	Xmax(0)	= 0.0000e+00,	0.0000e+00	#[1]
	gamma(0)	= 6.1973,	0.0000e+00	#[1]
	Xmax(1)	= 0.2,	0.2	#[1]
	gamma(1)	= 5.1797,	0.0000e+00	#[1]
	B(gamma(1))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(1))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(2)	= 0.5,	0.5	#[1]
	gamma(2)	= 3.7387,	0.0000e+00	#[1]
	B(gamma(2))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(2))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(3)	= 0.8,	0.8	#[1]
	gamma(3)	= 2.7321,	0.0000e+00	#[1]
	B(gamma(3))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(3))	= 0.0000e+00,	0.0000e+00	#[1]
	Xmax(4)	= 1,	1	#[1]
	gamma(4)	= 2.2623,	0.0000e+00	#[1]
	B(gamma(4))	= 0.0000e+00,	0.0000e+00	#[1]
	C(gamma(4))	= 0.0000e+00,	0.0000e+00	#[1]

}

*******************************************************************
*  Parameters for the recombination models below were taken 
*  from GaAs and require calibration for accurate simulations
*******************************************************************
Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin	= 0.0000e+00 ,	0.0000e+00	# [s]
	taumax	= 1.0000e-09 ,	1.0000e-09	# [s]
	Nref	= 1.0000e+16 ,	1.0000e+16	# [cm^(-3)]
	gamma	= 1 ,	1	# [1]
	Talpha	= 0.0000e+00 ,	0.0000e+00	# [1]
	Tcoeff	= 0.0000e+00 ,	0.0000e+00	# [1]
	Etrap	= 0.0000e+00	# [eV]
}

Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A	= 1.0000e-30 ,	1.0000e-30	# [cm^6/s]
	B	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	C	= 0.0000e+00 ,	0.0000e+00	# [cm^6/s]
	H	= 0.0000e+00 ,	0.0000e+00	# [1]
	N0	= 1.0000e+18 ,	1.0000e+18	# [cm^(-3)]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C	= 2.0000e-10	# [cm^3/s]
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
  *  parameters for electrons from C. Bulutay, Semicond.Sci.Technol. 17 (10), L59-L62 (Oct. 2002)
  *  no ref. for hole parameters; use same as for electrons to have something

	a(low)		=  1.1438e7  ,	1.1438e7 		# [1/cm]
	a(high)		=  1.1438e7  ,	1.1438e7 		# [1/cm]
	b(low)		=  2.38933e7 ,	2.38933e7 		# [V/cm]
	b(high)		=  2.38933e7 ,	2.38933e7 		# [V/cm]
	E0		= 4.0000e+05 ,	4.0000e+05		#[V/cm]
	hbarOmega	= 0.06,		0.06		#[V/cm]
        Xmax(0) 	= 0.0

        Xmax(1) 	= 1.0
	a(low)(1)	= 1.3e6  ,	1.3e6 		# [1/cm]
        B(a(low)(1))    = 0.0       ,    0.0
        C(a(low)(1))    = 0.0       ,    0.0
	a(high)(1)	= 1.3e6  ,	1.3e6 		# [1/cm]
        B(a(high)(1))   = 0.0       ,    0.0
        C(a(high)(1))   = 0.0       ,    0.0
	b(low)(1)	= 6.65e6 ,	6.65e6 		# [V/cm]
        B(b(low)(1))    = 0.0       ,    0.0
        C(b(low)(1))    = 0.0       ,    0.0
	b(high)(1)	= 6.65e6 ,	6.65e6 		# [V/cm]
        B(b(high)(1))   = 0.0       ,    0.0
        C(b(high)(1))   = 0.0       ,    0.0
	E0(1)		= 4.0000e+5 ,	4.0000e+05	#[V/cm]
        B(E0(1))	= 0.0       ,    0.0
        C(E0(1))	= 0.0       ,    0.0
	hbarOmega(1)	= 0.06	    ,	0.06		#[V/cm]
        B(hbarOmega(1))	= 0.0       ,    0.0
        C(hbarOmega(1))	= 0.0       ,    0.0

}

BarrierTunneling {mt=0.2, 0.5}

