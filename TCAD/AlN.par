* Copyright (c) 1994-2018 Synopsys, Inc.
* This parameter file and the associated documentation are proprietary
* to Synopsys, Inc.  This parameter file may only be used in accordance
* with the terms and conditions of a written license agreement with
* Synopsys, Inc.  All other use, reproduction, or distribution of this
* parameter file is strictly prohibited.

* [73Bar] A. S. Barker, M. Ilegems, Infrared lattice vibrations and free-electron dispersion in GaN, 
* Phys. Rev., B7, 1973
* [01Bou] V. Bougrov in M. E. Levinshtein, S. L. Rumyantsev, A. Zubrilov, Properties of Advanced
* Semiconductor Materials GaN, AlN, InN, BN, SiC, SiGe, John Wiley & Sons, New York, 2001, 1-30 
* [01Gol] Y. Goldberg in M. E. Levinshtein, S. L. Rumyantsev, A. Zubrilov,Properties of Advanced
* Semiconductor Materials GaN, AlN, InN, BN, SiC, SiGe, John Wiley & Sons, New York, 2001, 31-47
* [97Mal] F. Malengreau, M. Vermeersch, S. Hagege, R. Sporken, M. D. Lange, R. Caudano, 
* J. Mater. Res., 12, 175, 1997
* [77SiC] E. K. Sichel, J. I. Pankove, Thermal conductivity of GaN 25-360K, Phys. Chem. Solids, 39, 3, 1977
* [01Vur] I. Vurgaftman, J. R. Meyer, L. R. Ram-Mohan, Band parameters for III-V compound semiconductors
* and their alloys, Journal of Applied Physics, 89, 11, 2001
* [03Vur] I. Vurgaftman, L. R. Ram-Mohan, Band parameters for III-V compound semiconductors
* and their alloys, Journal of Applied Physics, 94, 6, 2003
* [97Wal] D. Walker et. al., Applied Physics Letters, vol. 70, no. 8, pp. 949-951, 1997
* [84Kos] V. I. Koshchenko, Y. K. Grinberg, A. F. Demidenko, Inora. Mater., vol. 20, no. 11, pp. 1550-1553, 1984

Epsilon
  { 
    * Ratio of the permittivities of material and vacuum
    * epsilon() = epsilon

    epsilon = 8.5 #[1], ioffe database and [01Gol], values up to 9.2 are used and measured
  }

Epsilon_aniso
  {
    * Ratio of the permittivities of material and vacuum
    * epsilon() = epsilon

    epsilon = 9.8 #[1], [97Mal], ratio of 1.15, values up to 10.7 are used
  }

*  refractiveindex{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  ComplexRefractiveIndex { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

SpectralConversion
{ * Spectral Conversion Model
  * No default model, user has to define.
  * All wavelength parameters should be in nanometers.
  * Choice of Analytic or NumericalTable selected in Physics section of region
  *
  * ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
  * AbsorptionScaling = float        * scale absorption
  * EmissionScaling = float          * scale emission
  * Analytic (
  *   AbsorptionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  *   EmissionProfile = (
  *      Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
  *      Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
  *      ...
  *   )
  * )
  * NumericalTable (
  *   AbsorptionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )
  *   EmissionProfile = (
  *      lambda0 value0
  *      lambda1 value1
  *      ...
  *   )

  ConversionEfficiency = 1.0
}

*************************** Lattice Heat Capacity: ****************************
*******************************************************************************

LatticeHeatCapacity
  { 
    * lumped electron-hole-lattice heat capacity
    * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 

    * without temperature dependence
    cv = 2.41 #[J/(K cm^3)], Ioffe database, [84Kos]
    cv_b = 0.0000e+00 #[J/(K^2 cm^3)]
    cv_c = 0.0000e+00 #[J/(K^3 cm^3)]
    cv_d = 0.0000e+00 #[J/(K^4 cm^3)]
    
    * without temperature dependence
    * cv = 0.36 #[J/(K cm^3)], Ioffe database, [84Kos]
    * cv_b = 9.2626e-3 #[J/(K^2 cm^3)]
    * cv_c = -9.1800e-6 #[J/(K^3 cm^3)]
    * cv_d = 3.0900e-9 #[J/(K^4 cm^3)]    
  }

**************************** Thermal Conductivity: ****************************
*******************************************************************************
Kappa
  { 
    * Lattice thermal conductivity

    Formula =  0
				
    1/kappa =  0.3509 #derived from ioffe database [77SiC]				
    1/kappa_b =  0.0000e+00 
    1/kappa_c = 0.0000e+00 

    * Formula = 1
 
    kappa = 2.85 # [W/(K cm)]
    kappa_b = 0.0000e+00 # [W/(K^2 cm)]
    kappa_c = 0.0000e+00 # [W/(K^3 cm)]
  }

*  Kappa_aniso{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

EnergyRelaxationTime
  {
    * Energy relaxation times in picoseconds

      tau_w_ele	= 0.1 # [ps]
      tau_w_hol	= 0.1 # [ps]

 * Below is the example of energy relaxation time approximation
 * by the ratio of two irrational polynomials.
 * If Wmax(interval-1) < Wc < Wmax(interval), then:
 * tau_w = (tau_w)*(Numerator^Gn)/(Denominator^Gd),
 * where (Numerator or Denominator)=SIGMA[A(i)(Wc^P(i))],
 * Wc=1.5(k*Tcar)/q (in eV).
 * By default: Wmin(0)=Wmax(-1)=0; Wmax(0)=infinity.
 * The option can be activated by specifying appropriate Formula equal to 2.
 *      Formula(tau_w_ele) = 2
 *      Formula(tau_w_hol) = 2
 *      Wmax(interval)_ele = 
 *      tau_w_ele(interval)     =     
 *      Numerator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        A(1)  = 
 *        P(1)  = 
 *        G     = 
 *      }
 *      Denominator(interval)_ele{
 *        A(0)  = 
 *        P(0)  = 
 *        G     = 
 *      }

 * Note: Energy relaxation times can be either molefraction dependent
 *       or energy dependent, but not both!

 *      Wmax(interval)_hol = 
 *      tau_w_hol(interval)     =  
}

AvalancheFactors
{ *  Coefficientss for avalanche generation with hydro
  *  Factors n_l_f, p_l_f for energy relaxation length in the expressions
  *  for effective electric field for avalanche generation
  *  eEeff = eEeff / n_l_f  ( or b = b*n_l_f ) 
  *  hEeff = hEeff / p_l_f  ( or b = b*p_l_f ) 
  *  Additional coefficients n_gamma, p_gamma, n_delta, p_delta 
	n_l_f	= 0.8					# [1]
	p_l_f	= 0.8					# [1]
	n_gamma	= 0.0000e+00				# [1]
	p_gamma	= 0.0000e+00				# [1]
	n_delta	= 0.0000e+00				# [1]
	p_delta	= 0.0000e+00				# [1]
}

**************************** Bandgap  *****************************************
*******************************************************************************
Bandgap
{ * Eg = Eg0 + alpha Tpar2 / (beta + Tpar) - alpha T2 / (beta + T)
  * Parameter 'Tpar' specifies the value of lattice 
  * temperature, at which parameters below are defined
  * Chi0 is electron affinity.
	Chi0		= 	1.999		#unit: [eV], references: [01Vur]					
	Bgn2Chi		= 	0.5		#unit: [1]			
	Eg0		= 	6.23		#unit: [eV], references: [01Vur]			
	alpha	        =       1.7900e-03				#unit: [eV K^-1], references: [01Vur]	
	beta	        =       1.4620e+03				#unit: [K], references: [01Vur]	 
	Tpar	        =       0.0				#unit: [K], references: [01Vur]	
}			

*  FreeCarrierAbsorption{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(InN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

BandstructureParameters
{
  * Parameters for k.p bandstructure calculation:

  * Zincblende crystals:
  * Luttinger parameters gamma_1, gamma_2, gamma_3
  * Spin-orbit split-off energy so
  * Matrix element parameters for TE and TM modes ep_te and ep_tm

  * Wurtzite crystals:
  * Effective mass parameters A1, A2, A3, A4, A5, A6
  * Spin-orbit split-off energy so
  * Crystal-field split  energy cr
  * Matrix element parameters for TE and TM modes ep_te and ep_tm
  * 
  * 

	gamma_1	= 6.85	# [1]
	gamma_2	= 2.1	# [1]
	gamma_3	= 2.9	# [1]
	so	= 0.019	# [eV]
	ep_te	= 15.6	# [eV]
	ep_tm	= 13.8	# [eV]
	cr	= -1.6400e-01	# [eV]
	A1	= -3.9500e+00	# [1]
	A2	= -2.7000e-01	# [1]
	A3	= 3.68	# [1]
	A4	= -1.8400e+00	# [1]
	A5	= -1.9200e+00	# [1]
	A6	= -2.9100e+00	# [1]
}

QWStrain
{
  * Zincblende crystals:
  *   Parameters: a_nu, a_c, b, C_12, C_11
  *   StrainConstant eps (formula = 1) or lattice constant
  *   a0 (formula = 2) for energy shift of quantum-well
  *   subbands.
  *   a0(T) = a0 + alpha (T-Tpar)

  * Wurtzite crystals:
  *   Parameters: a_c, D1, D2, D3, D4, C_13, C_33
  *   Lattice constants a0 and c0 (formula 2 must be used)
  *   a0(T) = a0 + alpha (T-Tpar)
  *   c0(T) = c0 + alpha (T-Tpar)

	  * Default formula	= 1	# [1]
	eps	= 0.0000e+00	# [1]
	a0	= 3.1120e-10	# [cm]
	alpha	= 0.0000e+00	# [cm/K]
	Tpar	= 3.0000e+02	# [K]
	a_nu	= 0.19	# [eV]
	a_c	= -4.0800e+00	# [eV]
	b_shear	= 0.9163	# [eV]
	c_11	= 11.879	# [1e-2 GPa]
	c_12	= 5.376	# [1e-2 GPa]
	d1	= -8.9000e-01	# [eV]
	d2	= 4.27	# [eV]
	d3	= 5.18	# [eV]
	d4	= -2.5900e+00	# [eV]
	c_13	= 1.27	# [1e-2 GPa]
	c_33	= 3.82	# [1e-2 GPa]
	c0	= 4.9820e-10	# [cm]
}

eDOSMass
  {
    * For effective mass specificatition Formula1 (me approximation):
    * or Formula2 (Nc300) can be used:

    Formula = 1 #[1]
    * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
    * mt = a[Eg(0)/Eg(T)] 
    * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.540e19 ((me/m0)*(T/300))^3/2 
    Formula = 1 #[1]
    a = 0.0 #[1]
    ml = 0.0 #[1]
    mm = 0.4 #[1], ioffe database

    * Formula = 2 #[1]
    * me/m0 = (Nc300/2.540e19)2/3
    * Nc(T) = Nc300*(T/300)3/2 
    Nc300 = 6.5e18 #[cm^-3], calculated from mass
  }

hDOSMass
  {
    * For effective mass specificatition Formula1 (mh approximation):
    * or Formula2 (Nv300) can be used:

    Formula = 1 #[1]
    a = 0.0 #[1]
    b = 0.0 #[K^-1]
    c = 0.0 #[K^-2]
    d = 0.0 #[K^-3]
    e = 0.0 #[K^-4]
    f = 0.0 #[K^-1]
    g = 0.0 #[K^-2]
    h = 0.0 #[K^-3]
    i = 0.0 #[K^-4]
    mm = 7.26 #[1]

    * Formula = 2 #[1]
    * mh/m0 = (Nv300/2.540e19)2/3
    * Nv(T) = Nv300*(T/300)3/2 
    Nv300 = 4.97e+20 #[cm-3], calculated from mass 
  }

*  SchroedingerParameters{...}
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

*  QuantumPotentialParameters { ... } 
*  By default, for mole fraction dependency of parameters
*  of the model, the following linear interpolation is applied
*  between two materials: P = x * P(AlN) + (1-x) * P(GaN)
*  where P(m) is a parameter of material m.
*  If the parameters are specified, then its values
*  will be used instead of the interpolation.

ConstantMobility:
  { 
    * mu_const = mumax (T/T0)^(-Exponent)
	
    Exponent = 1.0, 2.1 #[1]
    mumax = 300.0, 14.0 #[cm2/(Vs)] 
  }

* ConstantMobility_aniso{...}

DopingDependence:
  {
    * For doping dependent mobility model three formulas
    * can be used. Formula1 is based on Masetti et al. approximation.
    * Formula2 uses approximation, suggested by Arora.
    * If formula=1, model suggested by Masetti et al. is used:
    * mu_dop = mumin1 exp(-Pc/N) + (mu_const - mumin2)/(1+(N/Cr)^alpha)
    * - mu1/(1+(Cs/N)^beta)
    * with mu_const from ConstantMobility

    formula = 1, 1 # [1]

    mumin1 = 20.0, 1.0 # [cm2/Vs]
    mumin2 = 75.0, 0.0 # [cm2/Vs]
    mu1 = 20.0, 0.0 # [cm2/Vs]
    Pc = 6.50E+15, 5.00E+18 # [cm3]
    Cr = 9.50E+16, 9.50E+16 # [cm3]
    Cs = 1.00E+16, 1.00E+16 # [cm3]
    alpha = 0.9, 0.9 # [1]
    beta = 0.75, 0.0 # [1]

    * mu_dop = muminA + mudA/(1.+(N/N00)^AA),
    * where muminA=Ar_mumin*(T/T0)^Ar_alm; mudA = Ar_mud*(T/T0)^Ar_ald
    * N is net doping
    * N00=Ar_N0*(T/T0)^Ar_alN; AA = Ar_a*(T/T0)^Ar_ala
    
    # formula = 1, 1 # [1]

    Ar_mumin = 0.5, 1.0 # [cm2/Vs]
    Ar_alm = -0.67, -0.57 # [1]
    Ar_mud = 130.0, 14.0 # [cm2/Vs]
    Ar_ald = -3.43, -2.23 # [1]
    Ar_N0 = 3.0E+17, 7.0E+16 # [cm^(-3)]
    Ar_alN = 3.78, 2.4 # [1]
    Ar_a = 1.16, 0.9 # [1]
    Ar_ala = 0.86, -0.146 # [1]
  }

* ConstantMobility_aniso{...}

*  PhuMob{...} 

*  EnormalDependence{...}

*  EnormalDependence_aniso{...}

*  NegInterfaceChargeMobility{...}

*  NegInterfaceChargeMobility_aniso{...}

*  PosInterfaceChargeMobility{...}

*  PosInterfaceChargeMobility_aniso{...}

*  Coulomb2DMobility{...}

*  Coulomb2DMobility_aniso{...}

HighFieldDependence: 
{ * Caughey-Thomas model:
  * mu_highfield = mu_lowfield / ( 1 + (mu_lowfield E / vsat)^beta )1/beta
  * beta = beta0 (T/T0)^betaexp.
	beta0		= 2,		2		#[1]
	betaexp		= 0.0000e+00,		0.0000e+00		#[1]

  * Smoothing parameter for HydroHighField Caughey-Thomas model:
  * if Tl < Tc < (1+K_dT)*Tl, then smoothing between low field mobility
  * and HydroHighField mobility is used.
	K_dT		= 0.2,		0.2		# [1]
  * Transferred-Electron Effect:
  * mu_highfield = (mu_lowfield+(vsat/E)*(E/E0_TrEf)4)/(1+(E/E0_TrEf)4)
	E0_TrEf		= 2.7000e+05,		2.7000e+05		# [1]
	Ksmooth_TrEf		= 1,		1		# [1]

 * For vsat either Formula1 or Formula2 can be used.
	Vsat_Formula		= 2,		2		# [1]
 * Formula2 for saturation velocity:
 *            vsat = A_vsat - B_vsat*(T/T0)
 * (Parameter Vsat_Formula has to be equal to 2):
	A_vsat		= 1.5000e+07,		1.5000e+07		#[cm/s]
	B_vsat		= 0,		0		#[cm/s]
	vsat_min		= 5.0000e+06,		5.0000e+06		#[cm/s]
	
	vsat0		= 7.7000e+06,		7.7000e+06		#[cm/s]
	vsatexp		= 0.0000e+00,		0.0000e+00		#[1]
}

*  HighFieldDependence_aniso{...}

TransferredElectronEffect2:
{ * Transferred Electron Effect 2:
  *
  *                mu_lowfield + mu1 * (F/E0)^alpha + vsat * F^(beta-1) / E1^beta
  * mu_highfield = --------------------------------------------------------------
  *                            1 + gamma * (F/E0)^alpha + (F/E1)^beta
  *
	mu1		= 0.0000e+00,		0.0000e+00		#[cm^2/Vs]
	E0		= 4.4703e+05,		4.0000e+03		#[V/cm]
	E1		= 4.4703e+05,		4.0000e+03		#[V/cm]
	alpha		= 0.8554,		0.0000e+00		#[1]
	beta		= 17.3681,		4.0		#[1]
	gamma		= 8.7253,		0.0000e+00		#[1]
}

TransferredElectronEffect2_aniso:
{ * Transferred Electron Effect 2:
  *
  *                mu_lowfield + mu1 * (F/E0)^alpha + vsat * F^(beta-1) / E1^beta
  * mu_highfield = --------------------------------------------------------------
  *                            1 + gamma * (F/E0)^alpha + (F/E1)^beta
  *
	mu1		= 0.0000e+00,		0.0000e+00		# [cm^2/Vs]
	E0		= 4.4703e+05,		4.0000e+03		# [V/cm]
	E1		= 4.4703e+05,		4.0000e+03		# [V/cm]
	alpha		= 0.8554,		0.0000e+00		# [1]
	beta		= 17.3681,		4		# [1]
	gamma		= 8.7253,		0.0000e+00		# [1]
}

******************  Recombination/Generation Models: **************************
* Variable = electron value ,   hole value      # [units]                     *
*******************************************************************************
Scharfetter * relation and trap level for SRH recombination:
{ * tau = taumin + ( taumax - taumin ) / ( 1 + ( N/Nref )^gamma)
  * tau(T) = tau * ( (T/300)^Talpha )          (TempDep)
  * tau(T) = tau * exp( Tcoeff * ((T/300)-1) ) (ExpTempDep)
	taumin		= 0.0000e+00,		0.0000e+00		# [s]
	taumax		= 1.0000e-9,		1.0000e-9		# [s]
	Nref		= 1.0000e+16,		1.0000e+16		# [cm^(-3)]
	gamma		= 1,		1				# [1]
	Talpha		= -1.5000e+00,		-1.5000e+00		# [1]
	Tcoeff		= 2.55,		2.55			# [1]
	Etrap		= 0.0000e+00				# [eV]
}

vanOverstraetendeMan * Impact Ionization:
{ * G_impact = alpha_n n v_drift_n  +  alpha_p p v_drift_p
  * with alpha = gamma a  exp(-b gamma/E) for E<E0 (low) and E>E0 (high)
  *  with gamma = tanh(hbarOmega/(2kT0)) / tanh(hbarOmega/(2kT))
	#a(low)		= 2.9e8,		1.3400e+07		#[1/cm]
	#a(high)		= 2.9e8,		1.3400e+07		#[1/cm]
	#b(low)		= 3.4e8,		2.0300e+08		#[V/cm]
	#b(high)		= 3.4e8,		2.0300e+08		#[V/cm]
	#E0		= 4.0e+05,		4.0000e+05		#[V/cm]
	#hbarOmega		= 0.035,		0.035		#[V/cm]

	a(low)		= 1.26e+07,		5.41e+06		#references: for holes from GaN,for electrons from [02Bul] 	
	a(high)		= 1.26e+07,		5.41e+06		#references: for holes from GaN,for electrons from [02Bul] 		
	b(low)		= 3.92e+07,		1.96e+07		#references: for holes from GaN,for electrons from [02Bul] 		        
	b(high)		= 3.92e+07,		1.96e+07		#references: for holes from GaN,for electrons from [02Bul] 		
	E0		= 1.0,		1.0		#references: for holes from GaN,for electrons from [02Bul]
	hbarOmega		= 0.076,		0.076  	        #references: for electrons from [02Bul]       
}

*******************************************************************
*  Parameters for the recombination models below were taken 
*  from GaAs and require calibration for accurate simulations
*******************************************************************
Auger * coefficients:
{ * R_Auger = ( C_n n + C_p p ) ( n p - ni_eff^2)
  * with C_n,p = (A + B (T/T0) + C (T/T0)^2) (1 + H exp(-{n,p}/N0))
	A		= 1.0000e-30,	1.0000e-30			#[cm^6/s]
	B		= 0.0000e+00,	0.0000e+00			#[cm^6/s]
	C		= 0.0000e+00,	0.0000e+00			#[cm^6/s]
	H		= 0.0000e+00,	0.0000e+00			#[1]
	N0		= 1.0000e+18,	1.0000e+18			#[cm^(-3)]
}

RadiativeRecombination * coefficients:
{ * R_Radiative = C (n p - ni_eff^2)
	C		= 4.0e-11				#[97Wal]
	alpha		= 0.0			
}

Piezoelectric_Polarization
{ * The 'strain' model computes the polarization vector as follows:
  * 
  *   [P_x]   [psp_x                                     ]
  *   [P_y] = [psp_y                                     ]
  *   [P_z]   [psp_z + 2*d31*strain*(c11+c12-2*c13^2/c33)]
  * 
  *   strain = (1-relax)*(a0-a)/a
  * 
  * The 'stress' model computes the polarization vector as follows:
  * 
  *   [P_x]   [psp_x]   [d11 d12 d13 d14 d15 d16]   [stress_XX]
  *   [P_y] = [psp_y] + [d21 d22 d23 d24 d25 d26] * [stress_YY]
  *   [P_z]   [psp_z]   [d31 d32 d33 d34 d35 d36]   [stress_ZZ]
  *                                                 [stress_YZ]
  *                                                 [stress_XZ]
  *                                                 [stress_XY]
  * 
  * Parameters:
  * 
  *   [psp_x]: spontaneous polarization vector,
  *   [psp_y]  defined in crystal system [C/cm^2]
  *   [psp_z]
  * 
  *   c11, c12, c13, c33: stiffness constants,
  *                       defined in crystal system [Pa]
  * 
  *   a0: strained lattice constant [Angstrem]
  *   a: unstrained lattice constant [Angstrem]
  *   relax: relaxation parameter [1]
  * 
  *   d11 ... d36: piezoelectric coefficients,
  *                defined in crystal system [cm/V]
  * 
  * Fields:
  * 
  *   [stress_XX]: stress tensor,
  *   [stress_YY]  defined in stress system [Pa]
  *   [stress_ZZ]
  *   [stress_YZ]
  *   [stress_XZ]
  *   [stress_XY]
  * 
  *   [P_x]: polarization vector,
  *   [P_y]  defined in simulation system [C/cm^2]
  *   [P_z]
  * 
  * Coordinate systems:
  * 
  *   The simulation system is defined relative to the crystal
  *   system.  For example:
  * 
  *     LatticeParameters {
  *       X = (1, 0,  0)
  *       Y = (0, 0, -1)
  *     }
  * 
  *   The stress coordinate system is defined relative to the simulation
  *   system.  For example:
  * 
  *     Physics {
  *       Piezo (
  *         OriKddX = (-0.96  0.28  0)
  *         OriKddY = ( 0.28  0.96  0)
  *         Stress = (1e9  2e9  3e9  4e9  5e9  6e9)  # [Pa]
  *       )
  *     }
  * 
  *   To compute the polarization vector, the stress tensor is first
  *   transformed from the stress system to the crystal system.  Then
  *   the polarization vector is evaluated according to the 'strain' or
  *   'stress' model above.  Finally, the polarization vector is transformed
  *   from the crystal system to the simulation system.
  
    formula = 1

    relax = 0.0
  
  * piezoelectric coefficients:
	d11	=  0.0000e+00		#[cm/V]
	d12	=  0.0000e+00		#[cm/V]
	d13	=  0.0000e+00		#[cm/V]
	d14	=  0.0000e+00		#[cm/V]
	d15	=  3.6000e-10		#[cm/V], references: [03Vur]
	d16	=  0.0000e+00		#[cm/V]
	d21	=  0.0000e+00		#[cm/V]
	d22	=  0.0000e+00		#[cm/V]
	d23	=  0.0000e+00		#[cm/V]
	d24	=  3.6000e-10		#[cm/V], references: [03Vur]
	d25	=  0.0000e+00		#[cm/V]
	d26	=  0.0000e+00		#[cm/V]
	d31	= -2.1000e-10		#[cm/V], references: [03Vur]	
	d32	= -2.1000e-10		#[cm/V], references: [03Vur]	
	d33	=  5.4000e-10		#[cm/V], references: [03Vur]	
	d34	=  0.0000e+00		#[cm/V]
	d35	=  0.0000e+00		#[cm/V]
	d36	=  0.0000e+00		#[cm/V]
   
  * spontaneous polarization:
	psp_x	=  0.0000e+00		#[C/cm^2]
	psp_y	=  0.0000e+00		#[C/cm^2]
	psp_z	= -9.0000e-06		#[C/cm^2]
   
  * stiffness constants:
    c11 = 3.96e11
    c12 = 1.37e11
    c13 = 1.08e11
    c14 = 0.0
    c15 = 0.0	
    c16 = 0.0	
    c21 = 1.37e11
    c22 = 3.96e11
    c23 = 1.08e11
    c24 = 0.0
    c25 = 0.0	
    c26 = 0.0	
    c31 = 1.08e11
    c32 = 1.08e11
    c33 = 3.73e11
    c34 = 0.0
    c35 = 0.0	
    c36 = 0.0	
    c41 = 0.0
    c42 = 0.0
    c43 = 0.0
    c44 = 1.16e11
    c45 = 0.0	
    c46 = 0.0	
    c51 = 0.0
    c52 = 0.0
    c53 = 0.0
    c54 = 0.0
    c55 = 1.16e11	
    c56 = 0.0	
    c61 = 0.0
    c62 = 0.0
    c63 = 0.0
    c64 = 0.0
    c65 = 0.0
    c66 = 1.30e11	   

  * strain parameters:
	a0	=  3.189		#[Angstrem], comments: strained AlN on relaxed GaN
	a	=  3.112		#[Angstrem]
	relax	=  0.0		#[1]

  * piezoelectric coefficients 
  	e31	= -5.3838e-05		#[C/cm^2]
  	e32	= -5.3838e-05		#[C/cm^2]
  	e33	=  1.5672e-04		#[C/cm^2]
  	e15	=  4.1938e-05
  	e24	=  4.1938e-05		#[C/cm^2]
}

BarrierTunneling
	{ 
		mt 		= 	0.3,		0.5 
	}			

QuantumPotentialParameters
	{ 
		gamma		= 	0.42,	        5.6	#from GaN	
		theta		= 	0.5,		0.5	
		xi		= 	1,		1	
		eta		= 	1,		1	
	}

LatticeParameters
  {
    * Default orientation for 2D simulations with Y-axis pointing down
    * X = (1, 0, 0)
    * Y = (0, 0,-1)
    * S[i][j] - elasticity modulus; i,j = 1,2,...6 and j>=i.
    * CrystalSystem is symmetry, used ONLY to define the elasticity matrix.
    * Cubic (CrystalSystem=0): S[1][1],S[1][2],S[4][4]
    * Hexagonal (CrystalSystem=1): S[1][1],S[1][2],S[1][3],S[3][3],S[4][4]
 
    S[1][1] =  2.99e-01 # [1e-12 cm^2/din]
    S[1][2] = -8.70e-02 # [1e-12 cm^2/din]
    S[1][3] = -6.20e-02 # [1e-12 cm^2/din]
    S[3][3] =  3.04e-01 # [1e-12 cm^2/din]
    S[4][4] =  8.62e-01 # [1e-12 cm^2/din]
    CrystalSystem = 1 # [1]
  }

* Schottky { }


